xend=pca.result$rotation[1,1]*10,
yend=pca.result$rotation[2,1]*10,color="red")
#$rotation contains the directions of principal components in each of its columns.
pca.result$rotation
ggplot(iris,aes(Petal.Length,Petal.Width))+geom_point()+
geom_segment(x=0,y=0,
xend=pca.result$rotation[1,2]*5,
yend=pca.result$rotation[2,2]*5, color="blue")+
geom_segment(x=0,y=0,
xend=pca.result$rotation[1,1]*10,
yend=pca.result$rotation[2,1]*10,color="red")
#$rotation contains the directions of principal components in each of its columns.
pca.result$rotation
ggplot(iris,aes(Petal.Length,Petal.Width))+geom_point()+
geom_segment(x=0,y=0,
xend=pca.result$rotation[1,2]*5,
yend=pca.result$rotation[2,2]*5, color="blue")+
geom_segment(x=0,y=0,
xend=pca.result$rotation[1,1]*10,
yend=pca.result$rotation[2,1]*10,color="red")
#$rotation contains the directions of principal components in each of its columns.
pca.result$rotation
ggplot(iris,aes(Petal.Length,Petal.Width))+geom_point()+
geom_segment(x=0,y=0,
xend=pca.result$rotation[1,2]*5,
yend=pca.result$rotation[2,2]*5, color="blue")
geom_segment(x=0,y=0,
xend=pca.result$rotation[1,1]*10,
yend=pca.result$rotation[2,1]*10,color="red")
#$rotation contains the directions of principal components in each of its columns.
pca.result$rotation
ggplot(iris,aes(Petal.Length,Petal.Width))+geom_point()+
geom_segment(x=0,y=0,
xend=pca.result$rotation[1,2],
yend=pca.result$rotation[2,2], color="blue")
geom_segment(x=0,y=0,
xend=pca.result$rotation[1,1]*10,
yend=pca.result$rotation[2,1]*10,color="red")
#$rotation contains the directions of principal components in each of its columns.
pca.result$rotation
ggplot(iris,aes(Petal.Length,Petal.Width))+geom_point()+
geom_segment(x=10,y=10,
xend=pca.result$rotation[1,2],
yend=pca.result$rotation[2,2], color="blue")
geom_segment(x=0,y=0,
xend=pca.result$rotation[1,1]*10,
yend=pca.result$rotation[2,1]*10,color="red")
#$rotation contains the directions of principal components in each of its columns.
pca.result$rotation
ggplot(iris,aes(Petal.Length,Petal.Width))+geom_point()+
geom_segment(x=4,y=1.5,
xend=pca.result$rotation[1,2],
yend=pca.result$rotation[2,2], color="blue")
geom_segment(x=0,y=0,
xend=pca.result$rotation[1,1]*10,
yend=pca.result$rotation[2,1]*10,color="red")
#$rotation contains the directions of principal components in each of its columns.
pca.result$rotation
ggplot(iris,aes(Petal.Length,Petal.Width))+geom_point()+
geom_segment(x=4,y=1.5,
xend=pca.result$rotation[1,2]+4,
yend=pca.result$rotation[2,2]+1.5, color="blue")
geom_segment(x=0,y=0,
xend=pca.result$rotation[1,1]*10,
yend=pca.result$rotation[2,1]*10,color="red")
#$rotation contains the directions of principal components in each of its columns.
pca.result$rotation
ggplot(iris,aes(Petal.Length,Petal.Width))+geom_point()+
geom_segment(x=4,y=1.5,
xend=pca.result$rotation[1,2]+4,
yend=pca.result$rotation[2,2]+1.5, color="blue")
geom_segment(x=4,y=1.5,
xend=pca.result$rotation[1,1]+4,
yend=pca.result$rotation[2,1]+1.5,color="red")
#$rotation contains the directions of principal components in each of its columns.
pca.result$rotation
ggplot(iris,aes(Petal.Length,Petal.Width))+geom_point()+
geom_segment(x=4,y=1.5,
xend=pca.result$rotation[1,2]+4,
yend=pca.result$rotation[2,2]+1.5, color="blue")+
geom_segment(x=4,y=1.5,
xend=pca.result$rotation[1,1]+4,
yend=pca.result$rotation[2,1]+1.5,color="red")
#$sdev contains information about the fraction of variation explained by a certain principal component.
pca.result$sdev
(pca.result$sdev / sum(pca.result$sdev))*100
summary(pca.result)
#$center contains the mean for each data column (in our case it would be close or equal to 0 since we centered the data).
pca.result$center
#$scale contains information about whether or not we gave the option to scale (divide it by its standard deviation) the data.
pca.result$scale
#$x contains the coordinate values of the data projected to a principal component in each of its columns.
plot(pca.result$x[,1],pca.result$x[,2],xlim = c(-5,5), ylim = c(-5,5))
#$center contains the mean for each data column (in our case it would be close or equal to 0 since we centered the data).
pca.result$center
#$scale contains information about whether or not we gave the option to scale (divide it by its standard deviation) the data.
pca.result$scale
#$x contains the coordinate values of the data projected to a principal component in each of its columns.
pcaDf <- data.frame(pc1=pca.result$x[,1], pc2=pca.result$x[,2])
ggplot(pcaDf,aes(pc1,pc2))+geom_point()
library("gg3D")
data(iris)
ggplot(iris, aes(x=Petal.Width, y=Sepal.Width, z=Petal.Length, color=Species)) +
theme_void() + axes_3D() + stat_3D()
colnames(iris)
library("gg3D")
data(iris)
ggplot(iris, aes(x=Petal.Width, y=Sepal.Width, z=Petal.Length, color=Species)) +
theme_void() + axes_3D() + stat_3D()
pca.result <- prcomp(iris[,c(4,2,3)])
pcaDf <- data.frame(pc1=pca.result$x[,1], pc2=pca.result$x[,2], species=iris$Species)
ggplot(pcaDf,aes(pc1,pc2))+geom_point(color=species)
library("gg3D")
data(iris)
ggplot(iris, aes(x=Petal.Width, y=Sepal.Width, z=Petal.Length, color=Species)) +
theme_void() + axes_3D() + stat_3D()
pca.result <- prcomp(iris[,c(4,2,3)])
pcaDf <- data.frame(pc1=pca.result$x[,1], pc2=pca.result$x[,2], species=iris$Species)
ggplot(pcaDf,aes(pc1,pc2))+geom_point(aes(color=species))
library("gg3D")
data(iris)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, z=Petal.Length, color=Species)) +
theme_void() + axes_3D() + stat_3D()
pca.result <- prcomp(iris[,c(1,2,3)])
pcaDf <- data.frame(pc1=pca.result$x[,1], pc2=pca.result$x[,2], species=iris$Species)
ggplot(pcaDf,aes(pc1,pc2))+geom_point(aes(color=species))
library("gg3D")
data(iris)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, z=Petal.Width, color=Species)) +
theme_void() + axes_3D() + stat_3D()
pca.result <- prcomp(iris[,c(1,2,4)])
pcaDf <- data.frame(pc1=pca.result$x[,1], pc2=pca.result$x[,2], species=iris$Species)
ggplot(pcaDf,aes(pc1,pc2))+geom_point(aes(color=species))
#1,2,4
library("gg3D")
data(iris)
ggplot(iris, aes(x=Petal.Length, y=Sepal.Width, z=Petal.Width, color=Species)) +
theme_void() + axes_3D() + stat_3D()
pca.result <- prcomp(iris[,c(2,3,4)])
pcaDf <- data.frame(pc1=pca.result$x[,1], pc2=pca.result$x[,2], species=iris$Species)
ggplot(pcaDf,aes(pc1,pc2))+geom_point(aes(color=species))
#1,2,4
library("gg3D")
data(iris)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, z=Petal.Width, color=Species)) +
theme_void() + axes_3D() + stat_3D()
pca.result <- prcomp(iris[,c(1,2,4)])
pcaDf <- data.frame(pc1=pca.result$x[,1], pc2=pca.result$x[,2], species=iris$Species)
ggplot(pcaDf,aes(pc1,pc2))+geom_point(aes(color=species))
head(pval_ph2)
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(pval,quan))+geom_point()
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(-log10(pval),-log10(quan)))+geom_point()+
labs(x="Computed PVal",y="Theoretical Pval")
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(-log10(quan),-log10(pval)))+geom_point()+
labs(x="Computed PVal",y="Theoretical Pval")
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(-log10(quan),-log10(pval)))+geom_point()+
labs(y = "Computed PVal",x = "Theoretical Pval", title = "QQ Plot")+
geom_abline(intercept = 0, slope = 1, color="red")
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(-log10(quan),-log10(pval)))+geom_point()+
labs(y = "Computed PVal",x = "Theoretical Pval", title = "QQ Plot")+
geom_abline(intercept = 0, slope = 1, color="red")
manDf=data.frame(index=1:length(pval_ph2),pval=pval_ph2)
ggplot(manDf,aes(index,-log10(pval)))+geom_point()
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(-log10(quan),-log10(pval)))+geom_point()+
labs(y = "Computed PVal",x = "Theoretical Pval", title = "QQ Plot")+
geom_abline(intercept = 0, slope = 1, color="red")
manDf=data.frame(index=1:length(pval_ph2),pval=pval_ph2)
ggplot(manDf,aes(index,-log10(pval)))+geom_point()+
geom_hline(yintercept = 0.05/nrow(manDf),color="red")
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(-log10(quan),-log10(pval)))+geom_point()+
labs(y = "Computed PVal",x = "Theoretical Pval", title = "QQ Plot")+
geom_abline(intercept = 0, slope = 1, color="red")
manDf=data.frame(index=1:length(pval_ph2),pval=pval_ph2)
ggplot(manDf,aes(index,-log10(pval)))+geom_point()+
geom_hline(yintercept = -log10(0.05/nrow(manDf)),color="red")+
labs(title="Manhattan Plot",caption = "Signficant Variants by Bonferonni = X, by BH = X")
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(-log10(quan),-log10(pval)))+geom_point()+
labs(y = "Computed PVal",x = "Theoretical Pval", title = "QQ Plot")+
geom_abline(intercept = 0, slope = 1, color="red")
manDf=data.frame(index=1:length(pval_ph2),pval=pval_ph2)
ggplot(manDf,aes(index,-log10(pval)))+geom_point()+
geom_hline(yintercept = -log10(0.05/nrow(manDf)),color="red")+
labs(title="Manhattan Plot",caption = "Signficant Variants by Bonferonni = X, by BH = X")
pca = prcomp(xa_mat)
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(-log10(quan),-log10(pval)))+geom_point()+
labs(y = "Computed PVal",x = "Theoretical Pval", title = "QQ Plot")+
geom_abline(intercept = 0, slope = 1, color="red")
manDf=data.frame(index=1:length(pval_ph2),pval=pval_ph2)
ggplot(manDf,aes(index,-log10(pval)))+geom_point()+
geom_hline(yintercept = -log10(0.05/nrow(manDf)),color="red")+
labs(title="Manhattan Plot",caption = "Signficant Variants by Bonferonni = X, by BH = X")
pca = prcomp(xa_mat)
pcaDf <- data.frame(pc1=pca$x[,1],pc2=pca$x[,2])
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(-log10(quan),-log10(pval)))+geom_point()+
labs(y = "Computed PVal",x = "Theoretical Pval", title = "QQ Plot")+
geom_abline(intercept = 0, slope = 1, color="red")
manDf=data.frame(index=1:length(pval_ph2),pval=pval_ph2)
ggplot(manDf,aes(index,-log10(pval)))+geom_point()+
geom_hline(yintercept = -log10(0.05/nrow(manDf)),color="red")+
labs(title="Manhattan Plot",caption = "Signficant Variants by Bonferonni = X, by BH = X")
pca = prcomp(xa_mat)
pcaDf <- data.frame(pc1=pca$x[,1],pc2=pca$x[,2])
ggplot(pcaDf,aes(pc1,pc2))+geom_point()
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(-log10(quan),-log10(pval)))+geom_point()+
labs(y = "Computed PVal",x = "Theoretical Pval", title = "QQ Plot")+
geom_abline(intercept = 0, slope = 1, color="red")
manDf=data.frame(index=1:length(pval_ph2),pval=pval_ph2)
ggplot(manDf,aes(index,-log10(pval)))+geom_point()+
geom_hline(yintercept = -log10(0.05/nrow(manDf)),color="red")+
labs(title="Manhattan Plot",caption = "Signficant Variants by Bonferonni = X, by BH = X")
pca = prcomp(xa_mat)
pcaDf <- data.frame(pc1=pca$x[,1],pc2=pca$x[,2])
ggplot(pcaDf,aes(pc1,pc2))+geom_point()+
labs(x="PC1", y="PC2",title="PCA of the Xa Matrix")
library(cowplot)
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(-log10(quan),-log10(pval)))+geom_point()+
labs(y = "Computed PVal",x = "Theoretical Pval", title = "QQ Plot")+
geom_abline(intercept = 0, slope = 1, color="red")
manDf=data.frame(index=1:length(pval_ph2),pval=pval_ph2)
ggplot(manDf,aes(index,-log10(pval)))+geom_point()+
geom_hline(yintercept = -log10(0.05/nrow(manDf)),color="red")+
labs(title="Manhattan Plot",caption = "Signficant Variants by Bonferonni = X, by BH = X")
pca = prcomp(xa_mat)
pcaDf <- data.frame(pc1=pca$x[,1],pc2=pca$x[,2])
ggplot(pcaDf,aes(pc1,pc2))+geom_point()+
labs(x="PC1", y="PC2",title="PCA of the Xa Matrix")
getwd()
list.files()
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(-log10(quan),-log10(pval)))+geom_point()+
labs(y = "Computed PVal",x = "Theoretical Pval", title = "QQ Plot")+
geom_abline(intercept = 0, slope = 1, color="red")
manDf=data.frame(index=1:length(pval_ph2),pval=pval_ph2)
ggplot(manDf,aes(index,-log10(pval)))+geom_point()+
geom_hline(yintercept = -log10(0.05/nrow(manDf)),color="red")+
labs(title="Manhattan Plot",caption = "Signficant Variants by Bonferonni = X, by BH = X")
pca = prcomp(xa_mat)
pcaDf <- data.frame(pc1=pca$x[,1],pc2=pca$x[,2])
ggplot(pcaDf,aes(pc1,pc2))+geom_point()+
labs(x="PC1", y="PC2",title="PCA of the Xa Matrix")
getwd()
png("test.png")
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(-log10(quan),-log10(pval)))+geom_point()+
labs(y = "Computed PVal",x = "Theoretical Pval", title = "QQ Plot")+
geom_abline(intercept = 0, slope = 1, color="red")
dev.off()
manDf=data.frame(index=1:length(pval_ph2),pval=pval_ph2)
ggplot(manDf,aes(index,-log10(pval)))+geom_point()+
geom_hline(yintercept = -log10(0.05/nrow(manDf)),color="red")+
labs(title="Manhattan Plot",caption = "Signficant Variants by Bonferonni = X, by BH = X")
pca = prcomp(xa_mat)
pcaDf <- data.frame(pc1=pca$x[,1],pc2=pca$x[,2])
ggplot(pcaDf,aes(pc1,pc2))+geom_point()+
labs(x="PC1", y="PC2",title="PCA of the Xa Matrix")
png("qq_lab8.png")
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(-log10(quan),-log10(pval)))+geom_point()+
labs(y = "Computed PVal",x = "Theoretical Pval", title = "QQ Plot")+
geom_abline(intercept = 0, slope = 1, color="red")
dev.off()
png("manhattan_lab8.png")
manDf=data.frame(index=1:length(pval_ph2),pval=pval_ph2)
ggplot(manDf,aes(index,-log10(pval)))+geom_point()+
geom_hline(yintercept = -log10(0.05/nrow(manDf)),color="red")+
labs(title="Manhattan Plot",caption = "Signficant Variants by Bonferonni = X, by BH = X")
dev.off()
png("pca_lab8.png")
pca = prcomp(xa_mat)
pcaDf <- data.frame(pc1=pca$x[,1],pc2=pca$x[,2])
ggplot(pcaDf,aes(pc1,pc2))+geom_point()+
labs(x="PC1", y="PC2",title="PCA of the Xa Matrix")
dev.off()
knitr::include_graphics("./manhattan_lab8.png")
knitr::include_graphics("./qq_lab8.png")
png("qq_lab8.png")
qqDf=data.frame(pval=sort(pval_ph2),quan=seq(0,1,length.out = length(pval_ph2)))
ggplot(qqDf,aes(-log10(quan),-log10(pval)))+geom_point()+
labs(y = "Computed PVal",x = "Theoretical Pval", title = "QQ Plot")+
geom_abline(intercept = 0, slope = 1, color="red")
dev.off()
png("manhattan_lab8.png")
manDf=data.frame(index=1:length(pval_ph2),pval=pval_ph2)
ggplot(manDf,aes(index,-log10(pval)))+geom_point()+
geom_hline(yintercept = -log10(0.05/nrow(manDf)),color="red")+
labs(title="Manhattan Plot",caption = "Signficant Variants by Bonferonni = X, by BH = X")
dev.off()
png("pca_lab8.png")
pca = prcomp(xa_mat)
pcaDf <- data.frame(pc1=pca$x[,1],pc2=pca$x[,2])
ggplot(pcaDf,aes(pc1,pc2))+geom_point()+
labs(x="PC1", y="PC2",title="PCA of the Xa Matrix")
dev.off()
knitr::include_graphics("./pca_lab8.png")
knitr::include_graphics("./ideal_QQ.png")
knitr::include_graphics("./nornal_QQ.png")
knitr::include_graphics("./normal_QQ.png")
knitr::include_graphics("./uh_oh_QQ.png")
x=matrix(1:12,nrow=3)
x
t(x)
normalHist2 <- function(numSamples, sampSize, meanVal){
samplesMeans <- vector(length=numSamples)
for(i in 1:numSamples){
singleSample <- rnorm(sampSize, mean=5.5,sd=sqrt(0.5))
sampleMeans[i] <- mean(singleSample)
}
hist(sampleMeans)
}
normalHist2(numSamples = 1000, sampSize=100, meanVal = 5.5)
normalHist2 <- function(numSamples, sampSize, meanVal){
sampleMeans <- vector(length=numSamples)
for(i in 1:numSamples){
singleSample <- rnorm(sampSize, mean=5.5,sd=sqrt(0.5))
sampleMeans[i] <- mean(singleSample)
}
hist(sampleMeans)
}
normalHist2(numSamples = 1000, sampSize=100, meanVal = 5.5)
getwd()
x=read.table("pc.txt",stringsAsFactors = F)
x
x$V1=as.factor(x$V1)
x$V2=as.factor(x$V2)
ggplot(x,aes(V1,V3))+geom_point()
library(ggplot2)
ggplot(x,aes(V1,V3))+geom_point()
ggplot(x,aes(V1,V3))+geom_point()+geom_errorbar(ymin=V4,ymax=V5)
ggplot(x,aes(V1,V3))+geom_point()+geom_errorbar(aes(ymin=V4,ymax=V5))
ggplot(x,aes(V1,V3))+geom_point()+geom_errorbar(aes(ymin=V4,ymax=V5),width=0.4)
ggplot(x,aes(V1,V3))+geom_point()+geom_errorbar(aes(ymin=V4,ymax=V5,width=0.4))
ggplot(x,aes(V1,V3))+geom_point()+geom_errorbar(aes(ymin=V4,ymax=V5,width=0.2))
ggplot(x,aes(V1,V3))+geom_point(size=4)+geom_errorbar(aes(ymin=V4,ymax=V5,width=0.2))
library(cowplot)
ggplot(x,aes(V1,V3))+geom_point(size=4)+geom_errorbar(aes(ymin=V4,ymax=V5,width=0.2))
ggplot(x,aes(V1,V3))+geom_point(size=4,color="blue")+geom_errorbar(aes(ymin=V4,ymax=V5,width=0.2))
x
x$V6=paste(x$V1,x$V2,sep="-")
ggplot(x,aes(V6,V3))+geom_point(size=4,color="blue")+geom_errorbar(aes(ymin=V4,ymax=V5,width=0.2))
ggplot(x,aes(V6,V3))+geom_point(size=4,color="blue")+geom_errorbar(aes(ymin=V4,ymax=V5,width=0.2))+labs(x="Risk Category Percentile",y="Relative Risk")
setwd("~/Coding/ticTacToe/R/")
source('~/Coding/ticTacToe/R/simple-v1.R')
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,2,0.5)
rbinom(1,2,0.5)
rbinom(1,2,0.5)
rbinom(1,2,0.5)
rbinom(1,2,0.5)
rbinom(1,2,0.5)
rbinom(1,2,0.5)
?rbinom
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
source('~/Coding/ticTacToe/R/simple-v1.R')
playerSymbol
ifelse(playerSymbol=="X",comSymbol=="O",comSymbol="X")
ifelse(playerSymbol=="X",comSymbol="O",comSymbol="X")
comSymbol <- ifelse(playerSymbol=="X","O","X")
source('~/Coding/ticTacToe/R/simple-v1.R')
currentBoard <- matrix(rep(" ",9), nrow=3)
currentBoard
printBoard <- function(board){
print(board[1,1], "|", board[1,2], "|", board[1,3])
}
currentBoard <- matrix(rep(" ",9), nrow=3)
printBoard(currentBoard)
printBoard <- function(board){
cat(paste(board[1,1], "|", board[1,2], "|", board[1,3]))
}
currentBoard <- matrix(rep(" ",9), nrow=3)
printBoard(currentBoard)
printBoard <- function(board){
cat(paste(board[1,1], "|", board[1,2], "|", board[1,3],"\n"))
cat("- - -")
cat(paste(board[2,1], "|", board[2,2], "|", board[2,3],"\n"))
cat("- - -")
cat(paste(board[3,1], "|", board[3,2], "|", board[3,3],"\n"))
}
currentBoard <- matrix(rep(" ",9), nrow=3)
printBoard(currentBoard)
printBoard <- function(board){
cat(paste(board[1,1], "|", board[1,2], "|", board[1,3],"\n"))
cat("- - - \n")
cat(paste(board[2,1], "|", board[2,2], "|", board[2,3],"\n"))
cat("- - - \n")
cat(paste(board[3,1], "|", board[3,2], "|", board[3,3],"\n"))
}
currentBoard <- matrix(rep(" ",9), nrow=3)
printBoard(currentBoard)
printBoard <- function(board){
cat(paste(board[1,1], "|", board[1,2], "|", board[1,3],"\n"))
cat(" --------- \n")
cat(paste(board[2,1], "|", board[2,2], "|", board[2,3],"\n"))
cat(" --------- \n")
cat(paste(board[3,1], "|", board[3,2], "|", board[3,3],"\n"))
}
currentBoard <- matrix(rep(" ",9), nrow=3)
printBoard(currentBoard)
printBoard <- function(board){
cat(paste(board[1,1], " |", board[1,2], "|", board[1,3],"\n"))
cat(" --------- \n")
cat(paste(board[2,1], " |", board[2,2], "|", board[2,3],"\n"))
cat(" --------- \n")
cat(paste(board[3,1], " |", board[3,2], "|", board[3,3],"\n"))
}
currentBoard <- matrix(rep(" ",9), nrow=3)
printBoard(currentBoard)
modelBoard <- matrix(1:9, nrow=3)
printBoard(modelBoard)
modelBoard <- t(matrix(1:9, nrow=3))
printBoard(modelBoard)
printBoard <- function(board){
cat(paste(board[1,1], "|", board[1,2], "|", board[1,3],"\n"))
cat(" --------- \n")
cat(paste(board[2,1], "|", board[2,2], "|", board[2,3],"\n"))
cat(" --------- \n")
cat(paste(board[3,1], "|", board[3,2], "|", board[3,3],"\n"))
}
#initialize board
currentBoard <- matrix(rep(" ",9), nrow=3)
modelBoard <- t(matrix(1:9, nrow=3))
printBoard(modelBoard)
mod(9,3)
9 % 3
9 mod 3
9 %% 3
1 %% 3
2 %% 3
3 %% 3
4 %% 3
5 %% 3
6 /3
4 /3
ceiling(4 /3)
ceiling(3 /3)
currentBoard
currentBoard[1,1]="X"
currentBoard
currentBoard[3,1]="X"
unlist(currentBoard)
as.numeric(currentBoard)
as.character(currentBoard)
as.character(t(currentBoard))
which(as.character(t(currentBoard))==" ")
as.character(t(currentBoard))
which(as.character(t(currentBoard))=="X")
victorySets <- rbind(c(1,2,3),c(4,5,6),c(7,8,9),
c(1,4,7),c(2,5,8),c(3,6,9),
c(1,5,9),c(3,5,7))
victorySets
victorySets[1,] %in% c(1,3,5)
apply(victorySets,1,function(x) all(x %in% c(3,6,9,4)))
for(i in 1:100){
print(i)
ifelse(i==20,break,NULL)
}
for(i in 1:100){
print(i)
res<-ifelse(i==20,break,NULL)
}
for(i in 1:100){
print(i)
res<-ifelse(i==20,break,"NULL")
}
#Game functions ########################################################################################################
humanPlay <- function(board, symbol = playerSymbol){
playPosition <- checkInput("It is your turn, where will you go: ",1:9)
rowPos <- ceiling(playPosition/3)
colPos <- ifelse(playPosition %% 3 == 0, 3, playPosition)
if(board[rowPos,colPos]==" "){
print("That space is taken, please try again")
return(humanPlay(board))
} else {
board[rowPos,colPos] <- symbol
return(board)
}
}
playFunc <- humanPlay
playFunc
x=1
if(x==1,y=2;z=1,u=1)
ifelse(x==1,y=2;z=1,u=1)
ifelse(x==1,y=2,u=1)
x
ans=ifelse(x==1,y=2,u=1)
ifelse(x==1,3,2)
source('~/Coding/ticTacToe/R/simple-v1.R')
playFunc()
playFunc
playFunc(currentBoard)
rm(list=ls())
source('~/Coding/ticTacToe/R/simple-v1.R')
rm(list=ls())
source('~/Coding/ticTacToe/R/simple-v1.R')
